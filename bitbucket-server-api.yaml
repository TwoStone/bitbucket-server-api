openapi: 3.0.0
tags:
  - bitbucket
  - client-api
info:
  title: bitbucket-server-api
  version: 7.3.1
  description: |-
    <h1>REST Resources Provided By: Bitbucket Server - REST</h1>
    <p>
        This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:
    </p>
    <ul>
        <li>integrate Bitbucket with other applications;</li>
        <li>create scripts that interact with Bitbucket; or</li>
        <li>develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.</li>
    </ul>
    You can read more about developing Bitbucket plugins in the
    <a href="https://developer.atlassian.com/server/bitbucket/">Bitbucket Developer Documentation</a>.
    <p></p>
    <h2 id="gettingstarted">Getting started</h2>
    <p>
        Because the REST API is based on open standards, you can use any web development language or command line tool
        capable of generating an HTTP request to access the API. See the
        <a href="https://developer.atlassian.com/server/bitbucket/reference/rest-api/">developer documentation</a> for a
        basic
        usage example.
    </p>
    <p>
        If you're already working with the
        <a href="https://developer.atlassian.com/server/framework/atlassian-sdk/">Atlassian SDK</a>,
        the <a href="https://developer.atlassian.com/server/framework/atlassian-sdk/using-the-rest-api-browser/">REST API
            Browser</a> is a great tool for exploring and experimenting with the Bitbucket REST API.
    </p>
    <h2>
        <a name="StructureoftheRESTURIs"></a>Structure of the REST URIs</h2>
    <p>
        Bitbucket's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application
        will
        make an HTTP request and parse the response. The Bitbucket REST API uses JSON as its communication format, and the
        standard
        HTTP methods like GET, PUT, POST and DELETE. URIs for Bitbucket's REST API resource have the following structure:
    </p>
    <pre>    http://host:port/context/rest/api-name/api-version/path/to/resource
    </pre>
    <p>
        For example, the following URI would retrieve a page of the latest commits to the <strong>jira</strong> repository
        in
        the <strong>Jira</strong> project on <a href="https://stash.atlassian.com">https://stash.atlassian.com</a>.
    </p>
    <pre>    https://stash.atlassian.com/rest/api/1.0/projects/JIRA/repos/jira/commits
    </pre>
    <p>
        See the API descriptions below for a full list of available resources.
    </p>
    <p>
        Alternatively we also publish a list of resources in
        <a href="http://en.wikipedia.org/wiki/Web_Application_Description_Language">WADL</a> format. It is available
        <a href="bitbucket-rest.wadl">here</a>.
    </p>
    <h2 id="paging-params">Paged APIs</h2>
    <p>
        Bitbucket uses paging to conserve server resources and limit response size for resources that return potentially
        large
        collections of items. A request to a paged API will result in a <code>values</code> array wrapped in a JSON object
        with some paging metadata, like this:
    </p>
    <pre>    {
            "size": 3,
            "limit": 3,
            "isLastPage": false,
            "values": [
                { /* result 0 */ },
                { /* result 1 */ },
                { /* result 2 */ }
            ],
            "start": 0,
            "filter": null,
            "nextPageStart": 3
        }
    </pre>
    <p>
        Clients can use the <code>limit</code> and <code>start</code> query parameters to retrieve the desired number of
        results.
    </p>
    <p>
        The <code>limit</code> parameter indicates how many results to return per page. Most APIs default to returning
        <code>25</code> if the limit is left unspecified. This number can be increased, but note that a resource-specific
        hard limit will apply. These hard limits can be configured by server administrators, so it's always best practice to
        check the <code>limit</code> attribute on the response to see what limit has been applied.
        The request to get a larger page should look like this:
    </p>
    <pre>    http://host:port/context/rest/api-name/api-version/path/to/resource?limit={desired size of page}
    </pre>
    <p>
        For example:
    </p>
    <pre>    https://stash.atlassian.com/rest/api/1.0/projects/JIRA/repos/jira/commits?limit=1000
    </pre>
    <p>
        The <code>start</code> parameter indicates which item should be used as the first item in the page of results. All
        paged responses contain an <code>isLastPage</code> attribute indicating whether another page of items exists.
    </p>
    <p><strong>Important:</strong> If more than one page exists (i.e. the response contains
        <code>"isLastPage": false</code>), the response object will also contain a <code>nextPageStart</code> attribute
        which <strong><em>must</em></strong> be used by the client as the <code>start</code> parameter on the next request.
        Identifiers of adjacent objects in a page may not be contiguous, so the start of the next page is <em>not</em>
        necessarily the start of the last page plus the last page's size. A client should always use
        <code>nextPageStart</code> to avoid unexpected results from a paged API.
        The request to get a subsequent page should look like this:
    </p>
    <pre>    http://host:port/context/rest/api-name/api-version/path/to/resource?start={nextPageStart from previous response}
    </pre>
    <p>
        For example:
    </p>
    <pre>    https://stash.atlassian.com/rest/api/1.0/projects/JIRA/repos/jira/commits?start=25
    </pre>
    <h2 id="authentication">Authentication</h2>
    <p>
        Any authentication that works against Bitbucket will work against the REST API. <b>The preferred authentication
            methods
            are HTTP Basic (when using SSL) and OAuth</b>. Other supported methods include: HTTP Cookies and Trusted
        Applications.
    </p>
    <p>
        You can find OAuth code samples in several programming languages at
        <a
            href="https://bitbucket.org/atlassian_tutorial/atlassian-oauth-examples">bitbucket.org/atlassian_tutorial/atlassian-oauth-examples</a>.
    </p>
    <p>
        The log-in page uses cookie-based authentication, so if you are using Bitbucket in a browser you can call REST from
        JavaScript on the page and rely on the authentication that the browser has established.
    </p>
    <h2 id="errors-and-validation">Errors &amp; Validation</h2>
    <p>
        If a request fails due to client error, the resource will return an HTTP response code in the 40x range. These can
        be broadly categorised into:
    </p>
    <table>
        <tbody>
            <tr>
                <th>HTTP Code</th>
                <th>Description</th>
            </tr>
            <tr>
                <td>400 (Bad Request)</td>
                <td>
                    One or more of the required parameters or attributes:
                    <ul>
                        <li>were missing from the request;</li>
                        <li>incorrectly formatted; or</li>
                        <li>inappropriate in the given context.</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>401 (Unauthorized)</td>
                <td>
                    Either:
                    <ul>
                        <li>Authentication is required but was not attempted.</li>
                        <li>Authentication was attempted but failed.</li>
                        <li>Authentication was successful but the authenticated user does not have the requisite permission
                            for the resource.</li>
                    </ul>
                    See the individual resource documentation for details of required permissions.
                </td>
            </tr>
            <tr>
                <td>403 (Forbidden)</td>
                <td>
                    Actions are usually "forbidden" if they involve breaching the licensed user limit of the server, or
                    degrading the authenticated user's permission level. See the individual resource documentation for more
                    details.
                </td>
            </tr>
            <tr>
                <td>404 (Not Found)</td>
                <td>
                    The entity you are attempting to access, or the project or repository containing it, does not exist.
                </td>
            </tr>
            <tr>
                <td>405 (Method Not Allowed)</td>
                <td>
                    The request HTTP method is not appropriate for the targeted resource. For example an HTTP GET to a
                    resource that only accepts an HTTP POST will result in a 405.
                </td>
            </tr>
            <tr>
                <td>409 (Conflict)</td>
                <td>
                    The attempted update failed due to some conflict with an existing resource. For example:
                    <ul>
                        <li>Creating a project with a key that already exists</li>
                        <li>Merging an out-of-date pull request</li>
                        <li>Deleting a comment that has replies</li>
                        <li>etc.</li>
                    </ul>
                    See the individual resource documentation for more details.
                </td>
            </tr>
            <tr>
                <td>415 (Unsupported Media Type)</td>
                <td>
                    The request entity has a <code>Content-Type</code> that the server does not support. Almost all of the
                    Bitbucket REST API accepts <code>application/json</code> format, but check the individual resource
                    documentation for more details. Additionally, double-check that you are setting the
                    <code>Content-Type</code> header correctly on your request (e.g. using
                    <code>-H "Content-Type: application/json"</code> in cURL).
                </td>
            </tr>
        </tbody>
    </table>
    <p>
        For <strong>400</strong> HTTP codes the response will typically contain one or more validation error messages,
        for example:
    </p>
    <pre>    {
            "errors": [
                {
                    "context": "name",
                    "message": "The name should be between 1 and 255 characters.",
                    "exceptionName": null
                },
                {
                    "context": "email",
                    "message": "The email should be a valid email address.",
                    "exceptionName": null
                }
            ]
        }
        </pre>
    <p>
        The <code>context</code> attribute indicates which parameter or request entity attribute failed validation. Note
        that the <code>context</code> may be null.
    </p>
    <p>
        For <strong>401</strong>, <strong>403</strong>, <strong>404</strong> and <strong>409</strong>
        HTTP codes, the response will contain one or more descriptive error messages:
    </p>
    <pre>    {
            "errors": [
                {
                    "context": null,
                    "message": "A detailed error message.",
                    "exceptionName": null
                }
            ]
        }
        </pre>
    <p>
        A <strong>500</strong> (Server Error) HTTP code indicates an incorrect resource url or an unexpected server error.
        Double-check the URL you are trying to access, then report the issue to your server administrator or
        <a href="https://support.atlassian.com/">Atlassian Support</a> if problems persist.
    </p>
    <h2 id="personal-repositories">Personal Repositories</h2>
    <p>
        Bitbucket allows users to manage their own repositories, called personal repositories. These are repositories
        associated
        with the user and to which they always have REPO_ADMIN permission.
    </p>
    <p>
        Accessing personal repositories via REST is achieved through the normal project-centric REST URLs
        using the user's slug prefixed by tilde as the project key. E.g. to list personal repositories for a
        user with slug "johnsmith" you would make a GET to:
    </p>
    <pre>http://example.com/rest/api/1.0/projects/~johnsmith/repos</pre>
    <p></p>
    <p>
        In addition to this, Bitbucket allows access to these repositories through an alternate set of user-centric REST
        URLs
        beginning with:
    </p>
    <pre>http://example.com/rest/api/1.0/users/~{userSlug}/repos</pre>
    E.g. to list the forks of the repository with slug
    "nodejs" in the personal project of user with slug "johnsmith" using the regular REST URL you would make a GET to:
    <pre>http://example.com/rest/api/1.0/projects/~johnsmith/repos/nodejs/forks</pre>
    Using the alternate URL, you would make a GET to:
    <pre>http://example.com/rest/api/1.0/users/johnsmith/repos/nodejs/forks</pre>
    <p></p>
  contact:
    name: Niklas Walter
    url: 'https://github.com/TwoStone/bitbucket-server-api'
servers:
  - url: 'https://example.com'
    description: ''
paths:
  /rest/api/1.0/projects:
    get:
      summary: REST resource for working with projects
      tags: []
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projects'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
      operationId: getProjects
      description: |-
        Retrieve a page of projects.

        Only projects for which the authenticated user has the PROJECT_VIEW permission will be returned.
      parameters:
        - schema:
            type: string
          in: query
          name: name
          description: name to filter by
        - schema:
            type: string
          in: query
          name: permission
          description: permission to filter by
        - schema:
            type: integer
          in: query
          name: start
        - schema:
            type: integer
          in: query
          name: limit
  '/rest/api/1.0/projects/{projectKey}':
    get:
      summary: REST resource for working with projects
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
            application/xml:
              schema:
                $ref: '#/components/schemas/errors'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
      operationId: getProject
      description: |-
        Retrieve the project matching the supplied projectKey.

        The authenticated user must have PROJECT_VIEW permission for the specified project to call this resource.
    parameters:
      - schema:
          type: string
        name: projectKey
        in: path
        required: true
  '/rest/api/1.0/projects/{projectKey}/repos':
    parameters:
      - schema:
          type: string
        name: projectKey
        in: path
        required: true
    get:
      summary: REST resource for working with repositories
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repositories'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
      operationId: getRepositories
      description: |-
        Retrieve repositories from the project corresponding to the supplied projectKey.


        The authenticated user must have REPO_READ permission for the specified project to call this resource.
      parameters:
        - schema:
            type: integer
          in: query
          name: limit
        - schema:
            type: integer
          in: query
          name: start
  '/rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}':
    parameters:
      - schema:
          type: string
        name: projectKey
        in: path
        required: true
      - schema:
          type: string
        name: repositorySlug
        in: path
        required: true
    get:
      summary: REST resource for working with repositories
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repository'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
      operationId: getRepository
      description: |-
        Retrieve the repository matching the supplied projectKey and repositorySlug.

        The authenticated user must have REPO_READ permission for the specified repository to call this resource.
  /rest/api/1.0/repos:
    get:
      summary: REST resource for searching through repositories
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repositories'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
      operationId: searchRepositories
      description: |-
        Retrieve a page of repositories based on query parameters that control the search. See the documentation of the parameters for more details.

        This resource is anonymously accessible.

        Note on permissions. In absence of the permission query parameter the implicit 'read' permission is assumed. Please note that this permission is lower than the REPO_READ permission rather than being equal to it. The implicit 'read' permission for a given repository is assigned to any user that has any of the higher permissions, such as REPO_READ, as well as to anonymous users if the repository is marked as public. The important implication of the above is that an anonymous request to this resource with a permission level REPO_READ is guaranteed to receive an empty list of repositories as a result. For anonymous requests it is therefore recommended to not specify the permission parameter at all.
      parameters:
        - schema:
            type: string
          in: query
          name: name
          description: "(optional) if specified, this will limit the resulting repository list to ones whose name matches this parameter's value. The match will be done case-insensitive and any leading and/or trailing whitespace characters on the name parameter will be stripped."
        - schema:
            type: string
          in: query
          name: projectname
          description: "(optional) if specified, this will limit the resulting repository list to ones whose project's name matches this parameter's value. The match will be done case-insensitive and any leading and/or trailing whitespace characters on the projectname parameter will be stripped."
        - schema:
            type: string
            enum:
              - REPO_READ
              - REPO_WRITE
              - REPO_ADMIN
          in: query
          name: permission
          description: "(optional) if specified, it must be a valid repository permission level name and will limit the resulting repository list to ones that the requesting user has the specified permission level to. If not specified, the default implicit 'read' permission level will be assumed. The currently supported explicit permission values are REPO_READ, REPO_WRITE and REPO_ADMIN."
        - schema:
            type: string
            enum:
              - AVAILABLE
              - INITIALISING
              - INITIALISATION_FAILED
          in: query
          name: state
          description: |-
            (optional) if specified, it must be a valid repository state name and will limit the resulting repository list to ones that are in the specified state. The currently supported explicit state values are AVAILABLE, INITIALISING and INITIALISATION_FAILED.
            Available since 5.13
        - schema:
            type: string
            enum:
              - public
              - private
          in: query
          name: visibility
          description: '(optional) if specified, this will limit the resulting repository list based on the repositories visibility. Valid values are public or private.'
        - schema:
            type: integer
          in: query
          name: start
        - schema:
            type: integer
          in: query
          name: limit
      security:
        - usernamePassword: []
    parameters: []
  '/rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/branches':
    parameters:
      - schema:
          type: string
        name: projectKey
        in: path
        required: true
      - schema:
          type: string
        name: repositorySlug
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/branches'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
      operationId: getBranches
      description: |-
        Retrieve the branches matching the supplied filterText param.

        The authenticated user must have REPO_READ permission for the specified repository to call this resource.
      parameters:
        - schema:
            type: string
          in: query
          name: base
          description: base branch or tag to compare each branch to (for the metadata providers that uses that information)
        - schema:
            type: boolean
          in: query
          name: details
          description: whether to retrieve plugin-provided metadata about each branch
        - schema:
            type: string
          in: query
          name: filterText
          description: the text to match on
        - schema:
            type: string
            enum:
              - ALPHABETICAL
              - MODIFICATION
          in: query
          name: orderBy
          description: ordering of refs either ALPHABETICAL (by name) or MODIFICATION (last updated)
          explode: false
        - schema:
            type: boolean
          in: query
          name: boostMatches
          description: controls whether exact and prefix matches will be boosted to the top
        - schema:
            type: integer
          in: query
          name: start
        - schema:
            type: integer
          in: query
          name: limit
  '/rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/browse':
    parameters:
      - schema:
          type: string
        name: projectKey
        in: path
        required: true
      - schema:
          type: string
        name: repositorySlug
        in: path
        required: true
    get:
      summary: browseRepository
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/directory'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
      operationId: browseRepository
      description: |-
        Retrieve a page of content for a file path at a specified revision.

        The authenticated user must have REPO_READ permission for the specified repository to call this resource.
      parameters:
        - schema:
            type: string
          in: query
          name: at
          description: the commit ID or ref to retrieve the content for.
        - schema:
            type: integer
          in: query
          name: start
        - schema:
            type: integer
          in: query
          name: limit
  '/rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/browse/{path}':
    parameters:
      - schema:
          type: string
        name: projectKey
        in: path
        required: true
      - schema:
          type: string
        name: repositorySlug
        in: path
        required: true
      - schema:
          type: string
          pattern: '.*'
        name: path
        in: path
        required: true
    get:
      summary: browseRepositoryPath
      description: |-
        Retrieve a page of content for a file path at a specified revision.

        The authenticated user must have REPO_READ permission for the specified repository to call this resource.
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/file'
                  - $ref: '#/components/schemas/directory'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errors'
      operationId: browseRepositoryPath
      parameters:
        - schema:
            type: string
          in: query
          name: at
          description: the commit ID or ref to retrieve the content for.
        - schema:
            type: integer
          in: query
          name: start
        - schema:
            type: integer
          in: query
          name: limit
components:
  schemas:
    page:
      title: page
      type: object
      properties:
        size:
          type: integer
        limit:
          type: integer
        start:
          type: integer
        isLastPage:
          type: boolean
        nextPageStart:
          type: integer
      required:
        - size
        - limit
        - start
        - isLastPage
    project:
      title: project
      type: object
      properties:
        id:
          type: number
        key:
          type: string
        name:
          type: string
        description:
          type: string
        public:
          type: boolean
        type:
          type: string
        links:
          type: object
          properties:
            self:
              type: array
              items:
                $ref: '#/components/schemas/link'
      required:
        - key
        - name
        - description
        - public
        - type
    projects:
      title: projects
      allOf:
        - $ref: '#/components/schemas/page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/project'
          required:
            - values
      x-examples:
        Example:
          size: 1
          limit: 25
          isLastPage: true
          values:
            - key: PRJ
              id: 1
              name: My Cool Project
              description: The description for my cool project.
              public: true
              type: NORMAL
              links:
                self:
                  - href: 'http://link/to/project'
          start: 0
      description: A page of projects.
    errors:
      title: errors
      type: object
      x-examples:
        example:
          errors:
            - context: null
              message: A detailed error message.
              exceptionName: null
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              context:
                type: string
              message:
                type: string
              exceptionName:
                type: string
            required:
              - message
    repository:
      title: repository
      type: object
      properties:
        id:
          type: number
        slug:
          type: string
        name:
          type: string
        description:
          type: string
        hierarchyId:
          type: string
        scmId:
          type: string
        state:
          type: string
        statusMessage:
          type: string
        forkable:
          type: boolean
        public:
          type: boolean
        project:
          $ref: '#/components/schemas/project'
        links:
          type: object
          properties:
            clone:
              type: array
              items:
                $ref: '#/components/schemas/link'
            self:
              type: array
              items:
                $ref: '#/components/schemas/link'
      required:
        - slug
        - name
        - description
        - forkable
        - public
        - project
    link:
      title: link
      type: object
      properties:
        href:
          type: string
        name:
          type: string
      required:
        - href
    repositories:
      allOf:
        - $ref: '#/components/schemas/page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/repository'
          required:
            - values
    branch:
      title: branch
      type: object
      x-examples:
        branch:
          id: refs/heads/master
          displayId: master
          type: BRANCH
          latestCommit: 8d51122def5632836d1cb1026e879069e10a1e13
          latestChangeset: 8d51122def5632836d1cb1026e879069e10a1e13
          isDefault: true
      properties:
        id:
          type: string
        displayId:
          type: string
        type:
          type: string
          enum:
            - BRANCH
        latestCommit:
          type: string
          pattern: '[A-Fa-f0-9]+'
        latestChangeset:
          type: string
          pattern: '[A-Fa-f0-9]+'
        isDefault:
          type: boolean
      required:
        - id
        - displayId
        - type
        - latestCommit
        - latestChangeset
        - isDefault
    branches:
      title: branches
      allOf:
        - $ref: '#/components/schemas/page'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/branch'
    file:
      title: file
      type: object
      properties:
        start:
          type: integer
        size:
          type: integer
        isLastPage:
          type: boolean
        lines:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
    directory:
      title: directory
      type: object
      properties:
        path:
          $ref: '#/components/schemas/path'
        revision:
          type: string
        children:
          allOf:
            - $ref: '#/components/schemas/page'
            - type: object
              properties:
                values:
                  type: array
                  items:
                    oneOf:
                      - properties:
                          path:
                            $ref: '#/components/schemas/path'
                          contentId:
                            type: string
                          type:
                            type: string
                            enum:
                              - FILE
                          size:
                            type: string
                        required:
                          - type
                      - properties:
                          path:
                            $ref: '#/components/schemas/path'
                          node:
                            type: string
                          type:
                            type: string
                            enum:
                              - DIRECTORY
                        required:
                          - type
                    type: object
    path:
      title: path
      type: object
      properties:
        components:
          type: array
          items:
            type: string
        parent:
          type: string
        name:
          type: string
        extension:
          type: string
        toString:
          type: string
  securitySchemes:
    usernamePassword:
      type: http
      scheme: basic
      description: ''
security:
  - credentials: []
